import random
import click
from typing import Callable, Any
import time


def log(text: str) -> Callable:
    """
    –≠—Ç–æ –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤ –¥–µ–∫–∞—Ä–∞—Ç–æ—Ä
    –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç, –∫–∞–∫ –≤
    –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∫–µ
    """
# for pull request
    def decorator(fun: Callable) -> Callable:
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—á–∞—Ç–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∫–∏/–¥–æ—Å—Ç–∞–≤–∫–∏
        """

        def wrapper(*args, **kwargs) -> Any:
            result = fun(*args, **kwargs)
            print(text.format(random.randint(1, 10)))
            return result

        return wrapper

    return decorator


class Pizza_Recipes:
    """
    –ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞—Ö –ø–∏—Ü—Ü—ã –∏ –µ–µ —Ä–∞–∑–º–µ—Ä–µ
    """

    def __init__(self):
        """
        –≠—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∞
        """
        self.pizza_types = ['Margherita', 'Pepperoni', 'Hawaiian']
        self.pizza_size = ['L', 'XL']
        self._pizza_type = random.choice(self.pizza_types)
        self.recipes = {
            'Margherita': ['tomato sauce', 'mozzarella', 'tomatoes'],
            'Pepperoni': ['tomato sauce', 'mozzarella', 'pepperoni'],
            'Hawaiian': ['tomato sauce', 'mozzarella', 'chicken', 'pineapples']
        }
        self._pizza_size = random.choice(self.pizza_size)

    def dict(self, pizza_type: str) -> dict:
        """
        –ú–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–ª—è –Ω–µ–µ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã

        >>> Pizza_Recipes().dict('Pepperoni')
        ['tomato sauce', 'mozzarella', 'pepperoni']
        >>> Pizza_Recipes().dict('Hawaiian')
        ['tomato sauce', 'mozzarella', 'chicken', 'pineapples']
        >>> Pizza_Recipes().dict('Wrong_Key')
        Traceback (most recent call last):
        ...
        KeyError: 'Wrong_Key'
        """
        return self.recipes[pizza_type]

    def pizza_menu(self):
        """
        –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        """
        print(
            '\n–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è'
            ', –∫–∞–∫—É—é –ø–∏—Ü—Ü—É —Å–∫—É—à–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.\n–í –º–µ–Ω—é –µ—Å—Ç—å —Ç—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–∏—Ü—Ü—ã:\n'
            '\n‚Ä¢Margherita(–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞) \n‚Ä¢Pepperoni(–ü–µ–ø–ø–µ—Ä–æ–Ω–∏) '
            '\n‚Ä¢Hawaiian(–ê–Ω–∞–Ω–∞—Å)'
            '\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã, –≤—ã–±–µ—Ä–∏, –∫–∞–∫—É—é –ø–∏—Ü—Ü—É'
            ' —Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—à—å. –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–∏—Ü—Ü –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ:\n'
        )
        recipe_str = []
        pizza_emojis = {
            'Margherita': ' üßÄ',
            'Pepperoni': ' üçï',
            'Hawaiian': ' üçç',
        }
        for pz_name, pz_ingr in self.recipes.items():
            recipe_str.append('-- ' + pz_name + pizza_emojis[pz_name] + ' : '
                              + ', '.join(pz_ingr) + '\n')
        return ''.join(recipe_str)

    def __eq__(self, other_object) -> bool:
        if all([self._pizza_type == other_object._pizza_type,
                self._pizza_size == other_object._pizza_size]):
            return True
        else:
            return False


@click.group()
def cli():
    """
    –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    """
    pass


@cli.command()
def menu():
    """
    –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é
    """
    print(pizza_recipe.pizza_menu())
    return


@cli.command()
@click.option('--delivery', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
def order(pizza: str, delivery: bool):
    """
    –ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É
    """
    pizza = pizza.title()
    to_bake(pizza)
    if delivery:
        to_deliver(pizza)
    else:
        to_pickup(pizza)
    return


@log('üçΩ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {}—Å!')
def to_bake(pizza):
    """
    –ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É
    """
    print(
        '–ì–æ—Ç–æ–≤–∏–º {} –∏–∑ {}'.format(pizza, ', '.join(pizza_recipe.dict(pizza))))
    return


@log('üèç –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!')
def to_deliver(pizza):
    """
    –î–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∏—Ü—Ü—É

    >>> to_deliver('Pizza_name')
    –ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞...
    –ö—É—Ä—å–µ—Ä—É –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–∏—Ü—Ü–∞ Pizza_name...
    –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏...
    >>> to_deliver(123)
    –ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞...
    –ö—É—Ä—å–µ—Ä—É –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–∏—Ü—Ü–∞ 123...
    –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏...
    """
    print('–ò—â–µ–º –∫—É—Ä—å–µ—Ä–∞...')
    time.sleep(2 * random.random())
    print('–ö—É—Ä—å–µ—Ä—É –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–∏—Ü—Ü–∞ {}...'.format(pizza))
    time.sleep(2 * random.random())
    print('–ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏...')
    return


@log('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!')
def to_pickup(pizza):
    """
    –°–∞–º–æ–≤—ã–≤–æ–∑ –ø–∏—Ü—Ü—ã

    >>> to_pickup('Pizza_name')
    –ü–∏—Ü—Ü–∞ Pizza_name –≥–æ—Ç–æ–≤–∞
    –ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å
    >>> to_pickup(123)
    –ü–∏—Ü—Ü–∞ 123 –≥–æ—Ç–æ–≤–∞
    –ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å
    """
    time.sleep(2 * random.random())
    print('–ü–∏—Ü—Ü–∞ {} –≥–æ—Ç–æ–≤–∞\n–ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å'.format(pizza))
    return


if __name__ == '__main__':
    pizza_recipe = Pizza_Recipes()
    cli()

    pizza_recipe_second = Pizza_Recipes()
    print(pizza_recipe_second == pizza_recipe)
